name: Auto Merge PR
on:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Wait for other checks to complete
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;

            // Function to check required checks status
            async function checkStatus() {
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              // Get all check runs for the current commit
              const { data: checksResponse } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha,
                per_page: 100
              });
              
              // Define required checks (names must match exactly what GitHub reports)
              const requiredChecks = [
                "lint-and-format",
                "Pages changed - lake-park",
                "Header rules - lake-park",
                "Redirect rules - lake-park"
              ];
              
              console.log("Current check runs:");
              console.log("===================================");
              console.log("check_runs", checksResponse.check_runs);

              checksResponse.check_runs.forEach(run => {
                console.log(`- ${run.name}: ${run.status} / ${run.conclusion}`);
              });
              
              // Check if all required checks are completed and successful
              const pendingChecks = [];
              const failedChecks = [];
              
              for (const requiredCheck of requiredChecks) {
                const matchingRun = checksResponse.check_runs.find(run => 
                  run.name.includes(requiredCheck)
                );
                
                if (!matchingRun) {
                  pendingChecks.push(requiredCheck);
                  continue;
                }
                
                if (matchingRun.status !== 'completed') {
                  pendingChecks.push(requiredCheck);
                } else if (matchingRun.conclusion !== 'success' && matchingRun.conclusion !== 'neutral') {
                  failedChecks.push(requiredCheck);
                }
              }
              
              return { pendingChecks, failedChecks };
            }

            // Poll for check completion
            const maxAttempts = 10;
            const delaySeconds = 20;

            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              console.log(`Checking required checks (attempt ${attempt}/${maxAttempts})...`);
              
              const { pendingChecks, failedChecks } = await checkStatus();
              
              if (failedChecks.length > 0) {
                console.log(`❌ Required checks failed: ${failedChecks.join(', ')}`);
                throw new Error(`Required checks failed: ${failedChecks.join(', ')}`);
              }
              
              if (pendingChecks.length === 0) {
                console.log('✅ All required checks are successful!');
                break;
              }
              
              if (attempt === maxAttempts) {
                throw new Error(`Timed out waiting for checks: ${pendingChecks.join(', ')}`);
              }
              
              console.log(`Waiting for checks to complete: ${pendingChecks.join(', ')}`);
              console.log(`Waiting ${delaySeconds} seconds before next check...`);
              
              await new Promise(resolve => setTimeout(resolve, delaySeconds * 1000));
            }

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Merge PR if checks pass
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;

            console.log(`Attempting to merge PR #${prNumber}...`);

            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'squash'
            });

            console.log(`Successfully merged PR #${prNumber}`);
